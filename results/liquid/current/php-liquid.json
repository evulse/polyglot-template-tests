{
    "event": "suiteStart",
    "suite": "PHP Liquid Test Suite",
    "tests": 64
}{
    "event": "suiteStart",
    "suite": "PHPLiquidTest",
    "tests": 64
}{
    "event": "suiteStart",
    "suite": "PHPLiquidTest::testAdd",
    "tests": 64
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/break\/test_break_with_no_block\/1.html\" ('tags\/break\/test_break_with_no_block\/1.html', 'Test', '{% break %}', array(array(1), ''))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/break\/test_break_with_no_block\/1.html\" ('tags\/break\/test_break_with_no_block\/1.html', 'Test', '{% break %}', array(array(1), ''))",
    "status": "fail",
    "time": 0.00632882118225,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "",
                "LiquidException: Unkown tag break",
                "tags\/break\/test_break_with_no_block\/1.html"
            ]
        }
    ],
    "message": "tags\/break\/test_break_with_no_block\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/continue\/test_continue_with_no_block\/1.html\" ('tags\/continue\/test_continue_with_no_block\/1.html', 'Test', '{% continue %}', array(array(), ''))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/continue\/test_continue_with_no_block\/1.html\" ('tags\/continue\/test_continue_with_no_block\/1.html', 'Test', '{% continue %}', array(array(), ''))",
    "status": "fail",
    "time": 0.000463962554932,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "",
                "LiquidException: Unkown tag continue",
                "tags\/continue\/test_continue_with_no_block\/1.html"
            ]
        }
    ],
    "message": "tags\/continue\/test_continue_with_no_block\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_bad_variable_naming_in_for_loop\/1.html\" ('tags\/for\/test_bad_variable_naming_in_for_loop\/1.html', 'Test', '{% for a\/b in x %}{% endfor %}', array(array(), ''))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_bad_variable_naming_in_for_loop\/1.html\" ('tags\/for\/test_bad_variable_naming_in_for_loop\/1.html', 'Test', '{% for a\/b in x %}{% endfor %}', array(array(), ''))",
    "status": "pass",
    "time": 0.00245904922485,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_blank_string_not_iterable\/1.html\" ('tags\/for\/test_blank_string_not_iterable\/1.html', 'Test', '{% for char in characters %}I WILL NOT BE OUTPUT{% endfor %}', array(array(''), ''))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_blank_string_not_iterable\/1.html\" ('tags\/for\/test_blank_string_not_iterable\/1.html', 'Test', '{% for char in characters %}I WILL NOT BE OUTPUT{% endfor %}', array(array(''), ''))",
    "status": "pass",
    "time": 0.000375032424927,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_dynamic_variable_limiting\/1.html\" ('tags\/for\/test_dynamic_variable_limiting\/1.html', 'Test', '{%for i in array limit: limit offset: offset %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0), 2, 2), '34'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_dynamic_variable_limiting\/1.html\" ('tags\/for\/test_dynamic_variable_limiting\/1.html', 'Test', '{%for i in array limit: limit offset: offset %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0), 2, 2), '34'))",
    "status": "pass",
    "time": 0.00095796585083,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for\/1.html\" ('tags\/for\/test_for\/1.html', 'Test', '{%for item in array%} yo {%endfor%}', array(array(array(1, 2, 3, 4)), ' yo  yo  yo  yo '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for\/1.html\" ('tags\/for\/test_for\/1.html', 'Test', '{%for item in array%} yo {%endfor%}', array(array(array(1, 2, 3, 4)), ' yo  yo  yo  yo '))",
    "status": "pass",
    "time": 0.000341892242432,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for\/2.html\" ('tags\/for\/test_for\/2.html', 'Test', '{%for item in array%} yo {%endfor%}', array(array(array(1, 2)), ' yo  yo '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for\/2.html\" ('tags\/for\/test_for\/2.html', 'Test', '{%for item in array%} yo {%endfor%}', array(array(array(1, 2)), ' yo  yo '))",
    "status": "pass",
    "time": 0.000322103500366,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for\/3.html\" ('tags\/for\/test_for\/3.html', 'Test', '{%for item in array%} yo {%endfor%}', array(array(array(1)), ' yo '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for\/3.html\" ('tags\/for\/test_for\/3.html', 'Test', '{%for item in array%} yo {%endfor%}', array(array(array(1)), ' yo '))",
    "status": "pass",
    "time": 0.000302076339722,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for2\/1.html\" ('tags\/for\/test_for2\/1.html', 'Test', '{%for item in array%}{%endfor%}', array(array(array(1, 2)), ''))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for2\/1.html\" ('tags\/for\/test_for2\/1.html', 'Test', '{%for item in array%}{%endfor%}', array(array(array(1, 2)), ''))",
    "status": "pass",
    "time": 0.000303983688354,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for3\/1.html\" ('tags\/for\/test_for3\/1.html', 'Test', '{%for item in array%}\n    yo\n{%endfor%}\n', array(array(array(1, 2, 3)), '\n    yo\n\n    yo\n\n    yo\n\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for3\/1.html\" ('tags\/for\/test_for3\/1.html', 'Test', '{%for item in array%}\n    yo\n{%endfor%}\n', array(array(array(1, 2, 3)), '\n    yo\n\n    yo\n\n    yo\n\n'))",
    "status": "pass",
    "time": 0.000330924987793,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_and_if\/1.html\" ('tags\/for\/test_for_and_if\/1.html', 'Test', '{%for item in array%}{% if forloop.first %}+{% else %}-{% endif %}{%endfor%}', array(array(array(1, 2, 3)), '+--'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_and_if\/1.html\" ('tags\/for\/test_for_and_if\/1.html', 'Test', '{%for item in array%}{% if forloop.first %}+{% else %}-{% endif %}{%endfor%}', array(array(array(1, 2, 3)), '+--'))",
    "status": "pass",
    "time": 0.00162315368652,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_else\/1.html\" ('tags\/for\/test_for_else\/1.html', 'Test', '{%for item in array%}+{%else%}-{%endfor%}', array(array(array(1, 2, 3)), '+++'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_else\/1.html\" ('tags\/for\/test_for_else\/1.html', 'Test', '{%for item in array%}+{%else%}-{%endfor%}', array(array(array(1, 2, 3)), '+++'))",
    "status": "fail",
    "time": 0.00049090385437,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "+++",
                "LiquidException: for does not expect else tag",
                "tags\/for\/test_for_else\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_else\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_else\/2.html\" ('tags\/for\/test_for_else\/2.html', 'Test', '{%for item in array%}+{%else%}-{%endfor%}', array(array(array()), '-'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_else\/2.html\" ('tags\/for\/test_for_else\/2.html', 'Test', '{%for item in array%}+{%else%}-{%endfor%}', array(array(array()), '-'))",
    "status": "fail",
    "time": 0.000442981719971,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "-",
                "LiquidException: for does not expect else tag",
                "tags\/for\/test_for_else\/2.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_else\/2.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_else\/3.html\" ('tags\/for\/test_for_else\/3.html', 'Test', '{%for item in array%}+{%else%}-{%endfor%}', array(array(NULL), '-'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_else\/3.html\" ('tags\/for\/test_for_else\/3.html', 'Test', '{%for item in array%}+{%else%}-{%endfor%}', array(array(NULL), '-'))",
    "status": "fail",
    "time": 0.000437021255493,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "-",
                "LiquidException: for does not expect else tag",
                "tags\/for\/test_for_else\/3.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_else\/3.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers\/1.html\" ('tags\/for\/test_for_helpers\/1.html', 'Test', '{%for item in array%} {{forloop.index}}\/{{forloop.length}} {%endfor%}', array(array(array(1, 2, 3)), ' 1\/3  2\/3  3\/3 '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers\/1.html\" ('tags\/for\/test_for_helpers\/1.html', 'Test', '{%for item in array%} {{forloop.index}}\/{{forloop.length}} {%endfor%}', array(array(array(1, 2, 3)), ' 1\/3  2\/3  3\/3 '))",
    "status": "pass",
    "time": 0.000575065612793,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers2\/1.html\" ('tags\/for\/test_for_helpers2\/1.html', 'Test', '{%for item in array%} {{forloop.index}} {%endfor%}', array(array(array(1, 2, 3)), ' 1  2  3 '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers2\/1.html\" ('tags\/for\/test_for_helpers2\/1.html', 'Test', '{%for item in array%} {{forloop.index}} {%endfor%}', array(array(array(1, 2, 3)), ' 1  2  3 '))",
    "status": "pass",
    "time": 0.000442981719971,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers3\/1.html\" ('tags\/for\/test_for_helpers3\/1.html', 'Test', '{%for item in array%} {{forloop.index0}} {%endfor%}', array(array(array(1, 2, 3)), ' 0  1  2 '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers3\/1.html\" ('tags\/for\/test_for_helpers3\/1.html', 'Test', '{%for item in array%} {{forloop.index0}} {%endfor%}', array(array(array(1, 2, 3)), ' 0  1  2 '))",
    "status": "pass",
    "time": 0.00043511390686,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers4\/1.html\" ('tags\/for\/test_for_helpers4\/1.html', 'Test', '{%for item in array%} {{forloop.rindex0}} {%endfor%}', array(array(array(1, 2, 3)), ' 2  1  0 '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers4\/1.html\" ('tags\/for\/test_for_helpers4\/1.html', 'Test', '{%for item in array%} {{forloop.rindex0}} {%endfor%}', array(array(array(1, 2, 3)), ' 2  1  0 '))",
    "status": "pass",
    "time": 0.000447988510132,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers5\/1.html\" ('tags\/for\/test_for_helpers5\/1.html', 'Test', '{%for item in array%} {{forloop.rindex}} {%endfor%}', array(array(array(1, 2, 3)), ' 3  2  1 '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers5\/1.html\" ('tags\/for\/test_for_helpers5\/1.html', 'Test', '{%for item in array%} {{forloop.rindex}} {%endfor%}', array(array(array(1, 2, 3)), ' 3  2  1 '))",
    "status": "pass",
    "time": 0.00043797492981,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers6\/1.html\" ('tags\/for\/test_for_helpers6\/1.html', 'Test', '{%for item in array%} {{forloop.first}} {%endfor%}', array(array(array(1, 2, 3)), ' true  false  false '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers6\/1.html\" ('tags\/for\/test_for_helpers6\/1.html', 'Test', '{%for item in array%} {{forloop.first}} {%endfor%}', array(array(array(1, 2, 3)), ' true  false  false '))",
    "status": "fail",
    "time": 0.000641107559204,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                " true  false  false ",
                " 1  0  0 ",
                "tags\/for\/test_for_helpers6\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_helpers6\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers7\/1.html\" ('tags\/for\/test_for_helpers7\/1.html', 'Test', '{%for item in array%} {{forloop.last}} {%endfor%}', array(array(array(1, 2, 3)), ' false  false  true '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_helpers7\/1.html\" ('tags\/for\/test_for_helpers7\/1.html', 'Test', '{%for item in array%} {{forloop.last}} {%endfor%}', array(array(array(1, 2, 3)), ' false  false  true '))",
    "status": "fail",
    "time": 0.000662088394165,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                " false  false  true ",
                " 0  0  1 ",
                "tags\/for\/test_for_helpers7\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_helpers7\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_reversed\/1.html\" ('tags\/for\/test_for_reversed\/1.html', 'Test', '{%for item in array reversed %}{{item}}{%endfor%}', array(array(array(1, 2, 3)), '321'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_reversed\/1.html\" ('tags\/for\/test_for_reversed\/1.html', 'Test', '{%for item in array reversed %}{{item}}{%endfor%}', array(array(array(1, 2, 3)), '321'))",
    "status": "fail",
    "time": 0.000619173049927,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "321",
                "123",
                "tags\/for\/test_for_reversed\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_reversed\/1.html\nFailed asserting that '123' matches expected '321'.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_tag_string\/1.html\" ('tags\/for\/test_for_tag_string\/1.html', 'Test', '{%for val in string%}{{val}}{%endfor%}', array(array('test string'), 'test string'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_tag_string\/1.html\" ('tags\/for\/test_for_tag_string\/1.html', 'Test', '{%for val in string%}{{val}}{%endfor%}', array(array('test string'), 'test string'))",
    "status": "fail",
    "time": 0.000497102737427,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "test string",
                "",
                "tags\/for\/test_for_tag_string\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_tag_string\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_tag_string2\/1.html\" ('tags\/for\/test_for_tag_string2\/1.html', 'Test', '{%for val in string limit:1%}{{val}}{%endfor%}', array(array('test string'), 'test string'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_tag_string2\/1.html\" ('tags\/for\/test_for_tag_string2\/1.html', 'Test', '{%for val in string limit:1%}{{val}}{%endfor%}', array(array('test string'), 'test string'))",
    "status": "fail",
    "time": 0.000503778457642,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "test string",
                "",
                "tags\/for\/test_for_tag_string2\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_tag_string2\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_tag_string3\/1.html\" ('tags\/for\/test_for_tag_string3\/1.html', 'Test', '{%for val in string%}{{forloop.name}}-{{forloop.index}}-{{forloop.length}}-{{forloop.index0}}-{{forloop.rindex}}-{{forloop.rindex0}}-{{forloop.first}}-{{forloop.last}}-{{val}}{%endfor%}', array(array('test string'), 'val-string-1-1-0-1-0-true-true-test string'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_tag_string3\/1.html\" ('tags\/for\/test_for_tag_string3\/1.html', 'Test', '{%for val in string%}{{forloop.name}}-{{forloop.index}}-{{forloop.length}}-{{forloop.index0}}-{{forloop.rindex}}-{{forloop.rindex0}}-{{forloop.first}}-{{forloop.last}}-{{val}}{%endfor%}', array(array('test string'), 'val-string-1-1-0-1-0-true-true-test string'))",
    "status": "fail",
    "time": 0.000848770141602,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "val-string-1-1-0-1-0-true-true-test string",
                "",
                "tags\/for\/test_for_tag_string3\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_tag_string3\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break\/1.html\" ('tags\/for\/test_for_with_break\/1.html', 'Test', '{% for i in array.items %}{% break %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))), ''))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break\/1.html\" ('tags\/for\/test_for_with_break\/1.html', 'Test', '{% for i in array.items %}{% break %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))), ''))",
    "status": "fail",
    "time": 0.00047779083252,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "",
                "LiquidException: Unkown tag break",
                "tags\/for\/test_for_with_break\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_break\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break2\/1.html\" ('tags\/for\/test_for_with_break2\/1.html', 'Test', '{% for i in array.items %}{{ i }}{% break %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))), '1'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break2\/1.html\" ('tags\/for\/test_for_with_break2\/1.html', 'Test', '{% for i in array.items %}{{ i }}{% break %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))), '1'))",
    "status": "fail",
    "time": 0.000492095947266,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "1",
                "LiquidException: Unkown tag break",
                "tags\/for\/test_for_with_break2\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_break2\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break3\/1.html\" ('tags\/for\/test_for_with_break3\/1.html', 'Test', '{% for i in array.items %}{% break %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))), ''))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break3\/1.html\" ('tags\/for\/test_for_with_break3\/1.html', 'Test', '{% for i in array.items %}{% break %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))), ''))",
    "status": "fail",
    "time": 0.000452995300293,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "",
                "LiquidException: Unkown tag break",
                "tags\/for\/test_for_with_break3\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_break3\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break4\/1.html\" ('tags\/for\/test_for_with_break4\/1.html', 'Test', '{% for i in array.items %}{{ i }}{% if i > 3 %}{% break %}{% endif %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))), '1234'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break4\/1.html\" ('tags\/for\/test_for_with_break4\/1.html', 'Test', '{% for i in array.items %}{{ i }}{% if i > 3 %}{% break %}{% endif %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))), '1234'))",
    "status": "fail",
    "time": 0.000555038452148,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "1234",
                "LiquidException: Unkown tag break",
                "tags\/for\/test_for_with_break4\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_break4\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break5\/1.html\" ('tags\/for\/test_for_with_break5\/1.html', 'Test', '{% for item in array %}{% for i in item %}{% if i == 1 %}{% break %}{% endif %}{{ i }}{% endfor %}{% endfor %}', array(array(array(array(1, 2), array(3, 4), array(5, 6))), '3456'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break5\/1.html\" ('tags\/for\/test_for_with_break5\/1.html', 'Test', '{% for item in array %}{% for i in item %}{% if i == 1 %}{% break %}{% endif %}{{ i }}{% endfor %}{% endfor %}', array(array(array(array(1, 2), array(3, 4), array(5, 6))), '3456'))",
    "status": "fail",
    "time": 0.000535011291504,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "3456",
                "LiquidException: Unkown tag break",
                "tags\/for\/test_for_with_break5\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_break5\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break6\/1.html\" ('tags\/for\/test_for_with_break6\/1.html', 'Test', '{% for i in array.items %}{% if i == 9999 %}{% break %}{% endif %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '12345'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_break6\/1.html\" ('tags\/for\/test_for_with_break6\/1.html', 'Test', '{% for i in array.items %}{% if i == 9999 %}{% break %}{% endif %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '12345'))",
    "status": "fail",
    "time": 0.000478982925415,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "12345",
                "LiquidException: Unkown tag break",
                "tags\/for\/test_for_with_break6\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_break6\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue\/1.html\" ('tags\/for\/test_for_with_continue\/1.html', 'Test', '{% for i in array.items %}{% continue %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), ''))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue\/1.html\" ('tags\/for\/test_for_with_continue\/1.html', 'Test', '{% for i in array.items %}{% continue %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), ''))",
    "status": "fail",
    "time": 0.000443935394287,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "",
                "LiquidException: Unkown tag continue",
                "tags\/for\/test_for_with_continue\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_continue\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue2\/1.html\" ('tags\/for\/test_for_with_continue2\/1.html', 'Test', '{% for i in array.items %}{{ i }}{% continue %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '12345'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue2\/1.html\" ('tags\/for\/test_for_with_continue2\/1.html', 'Test', '{% for i in array.items %}{{ i }}{% continue %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '12345'))",
    "status": "fail",
    "time": 0.000541925430298,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "12345",
                "LiquidException: Unkown tag continue",
                "tags\/for\/test_for_with_continue2\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_continue2\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue3\/1.html\" ('tags\/for\/test_for_with_continue3\/1.html', 'Test', '{% for i in array.items %}{% continue %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), ''))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue3\/1.html\" ('tags\/for\/test_for_with_continue3\/1.html', 'Test', '{% for i in array.items %}{% continue %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), ''))",
    "status": "fail",
    "time": 0.00047492980957,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "",
                "LiquidException: Unkown tag continue",
                "tags\/for\/test_for_with_continue3\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_continue3\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue4\/1.html\" ('tags\/for\/test_for_with_continue4\/1.html', 'Test', '{% for i in array.items %}{% if i > 3 %}{% continue %}{% endif %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '123'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue4\/1.html\" ('tags\/for\/test_for_with_continue4\/1.html', 'Test', '{% for i in array.items %}{% if i > 3 %}{% continue %}{% endif %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '123'))",
    "status": "fail",
    "time": 0.000547885894775,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "123",
                "LiquidException: Unkown tag continue",
                "tags\/for\/test_for_with_continue4\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_continue4\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue5\/1.html\" ('tags\/for\/test_for_with_continue5\/1.html', 'Test', '{% for i in array.items %}{% if i == 3 %}{% continue %}{% else %}{{ i }}{% endif %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '1245'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue5\/1.html\" ('tags\/for\/test_for_with_continue5\/1.html', 'Test', '{% for i in array.items %}{% if i == 3 %}{% continue %}{% else %}{{ i }}{% endif %}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '1245'))",
    "status": "fail",
    "time": 0.000484943389893,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "1245",
                "LiquidException: Unkown tag continue",
                "tags\/for\/test_for_with_continue5\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_continue5\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue6\/1.html\" ('tags\/for\/test_for_with_continue6\/1.html', 'Test', '{% for item in array %}{% for i in item %}{% if i == 1 %}{% continue %}{% endif %}{{ i }}{% endfor %}{% endfor %}', array(array(array(array(1, 2), array(3, 4), array(5, 6))), '23456'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue6\/1.html\" ('tags\/for\/test_for_with_continue6\/1.html', 'Test', '{% for item in array %}{% for i in item %}{% if i == 1 %}{% continue %}{% endif %}{{ i }}{% endfor %}{% endfor %}', array(array(array(array(1, 2), array(3, 4), array(5, 6))), '23456'))",
    "status": "fail",
    "time": 0.000600814819336,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "23456",
                "LiquidException: Unkown tag continue",
                "tags\/for\/test_for_with_continue6\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_continue6\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue7\/1.html\" ('tags\/for\/test_for_with_continue7\/1.html', 'Test', '{% for i in array.items %}{% if i == 9999 %}{% continue %}{% endif %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '12345'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_continue7\/1.html\" ('tags\/for\/test_for_with_continue7\/1.html', 'Test', '{% for i in array.items %}{% if i == 9999 %}{% continue %}{% endif %}{{ i }}{% endfor %}', array(array(array(array(1, 2, 3, 4, 5))), '12345'))",
    "status": "fail",
    "time": 0.000558853149414,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "12345",
                "LiquidException: Unkown tag continue",
                "tags\/for\/test_for_with_continue7\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_continue7\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_range\/1.html\" ('tags\/for\/test_for_with_range\/1.html', 'Test', '{%for item in (1..3) %} {{item}} {%endfor%}', array(array(), ' 1  2  3 '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_range\/1.html\" ('tags\/for\/test_for_with_range\/1.html', 'Test', '{%for item in (1..3) %} {{item}} {%endfor%}', array(array(), ' 1  2  3 '))",
    "status": "fail",
    "time": 0.000478029251099,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                " 1  2  3 ",
                "LiquidException: Syntax Error in 'for loop' - Valid syntax: for [item] in [collection]",
                "tags\/for\/test_for_with_range\/1.html"
            ]
        }
    ],
    "message": "tags\/for\/test_for_with_range\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable\/1.html\" ('tags\/for\/test_for_with_variable\/1.html', 'Test', '{%for item in array%} {{item}} {%endfor%}', array(array(array(1, 2, 3)), ' 1  2  3 '))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable\/1.html\" ('tags\/for\/test_for_with_variable\/1.html', 'Test', '{%for item in array%} {{item}} {%endfor%}', array(array(array(1, 2, 3)), ' 1  2  3 '))",
    "status": "pass",
    "time": 0.000508069992065,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/1.html\" ('tags\/for\/test_for_with_variable2\/1.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array(1, 2, 3)), '123'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/1.html\" ('tags\/for\/test_for_with_variable2\/1.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array(1, 2, 3)), '123'))",
    "status": "pass",
    "time": 0.000432014465332,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/2.html\" ('tags\/for\/test_for_with_variable2\/2.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array(1, 2, 3)), '123'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/2.html\" ('tags\/for\/test_for_with_variable2\/2.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array(1, 2, 3)), '123'))",
    "status": "pass",
    "time": 0.000406980514526,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/3.html\" ('tags\/for\/test_for_with_variable2\/3.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array('a', 'b', 'c', 'd')), 'abcd'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/3.html\" ('tags\/for\/test_for_with_variable2\/3.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array('a', 'b', 'c', 'd')), 'abcd'))",
    "status": "pass",
    "time": 0.000466108322144,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/4.html\" ('tags\/for\/test_for_with_variable2\/4.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array('a', ' ', 'b', ' ', 'c')), 'a b c'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/4.html\" ('tags\/for\/test_for_with_variable2\/4.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array('a', ' ', 'b', ' ', 'c')), 'a b c'))",
    "status": "pass",
    "time": 0.000495195388794,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/5.html\" ('tags\/for\/test_for_with_variable2\/5.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array('a', '', 'b', '', 'c')), 'abc'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_for_with_variable2\/5.html\" ('tags\/for\/test_for_with_variable2\/5.html', 'Test', '{%for item in array%}{{item}}{%endfor%}', array(array(array('a', '', 'b', '', 'c')), 'abc'))",
    "status": "pass",
    "time": 0.000485897064209,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_limiting\/1.html\" ('tags\/for\/test_limiting\/1.html', 'Test', '{%for i in array limit:2 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '12'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_limiting\/1.html\" ('tags\/for\/test_limiting\/1.html', 'Test', '{%for i in array limit:2 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '12'))",
    "status": "pass",
    "time": 0.00043797492981,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_limiting2\/1.html\" ('tags\/for\/test_limiting2\/1.html', 'Test', '{%for i in array limit:4 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '1234'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_limiting2\/1.html\" ('tags\/for\/test_limiting2\/1.html', 'Test', '{%for i in array limit:4 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '1234'))",
    "status": "pass",
    "time": 0.000500917434692,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_limiting3\/1.html\" ('tags\/for\/test_limiting3\/1.html', 'Test', '{%for i in array limit:4 offset:2 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '3456'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_limiting3\/1.html\" ('tags\/for\/test_limiting3\/1.html', 'Test', '{%for i in array limit:4 offset:2 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '3456'))",
    "status": "pass",
    "time": 0.000484943389893,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_limiting4\/1.html\" ('tags\/for\/test_limiting4\/1.html', 'Test', '{%for i in array limit: 4 offset: 2 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '3456'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_limiting4\/1.html\" ('tags\/for\/test_limiting4\/1.html', 'Test', '{%for i in array limit: 4 offset: 2 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '3456'))",
    "status": "pass",
    "time": 0.000479221343994,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_nested_for\/1.html\" ('tags\/for\/test_nested_for\/1.html', 'Test', '{%for item in array%}{%for i in item%}{{ i }}{%endfor%}{%endfor%}', array(array(array(array(1, 2), array(3, 4), array(5, 6))), '123456'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_nested_for\/1.html\" ('tags\/for\/test_nested_for\/1.html', 'Test', '{%for item in array%}{%for i in item%}{{ i }}{%endfor%}{%endfor%}', array(array(array(array(1, 2), array(3, 4), array(5, 6))), '123456'))",
    "status": "pass",
    "time": 0.000720024108887,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_offset_only\/1.html\" ('tags\/for\/test_offset_only\/1.html', 'Test', '{%for i in array offset:7 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '890'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_offset_only\/1.html\" ('tags\/for\/test_offset_only\/1.html', 'Test', '{%for i in array offset:7 %}{{ i }}{%endfor%}', array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)), '890'))",
    "status": "pass",
    "time": 0.000452995300293,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_pause_resume\/1.html\" ('tags\/for\/test_pause_resume\/1.html', 'Test', '{%for i in array.items limit: 3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit: 3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit: 3 %}{{i}}{%endfor%}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))), '123\nnext\n456\nnext\n789'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_pause_resume\/1.html\" ('tags\/for\/test_pause_resume\/1.html', 'Test', '{%for i in array.items limit: 3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit: 3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit: 3 %}{{i}}{%endfor%}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))), '123\nnext\n456\nnext\n789'))",
    "status": "pass",
    "time": 0.000977039337158,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_pause_resume_BIG_limit\/1.html\" ('tags\/for\/test_pause_resume_BIG_limit\/1.html', 'Test', '{%for i in array.items limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:1000 %}{{i}}{%endfor%}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))), '123\nnext\n456\nnext\n7890'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_pause_resume_BIG_limit\/1.html\" ('tags\/for\/test_pause_resume_BIG_limit\/1.html', 'Test', '{%for i in array.items limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:1000 %}{{i}}{%endfor%}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))), '123\nnext\n456\nnext\n7890'))",
    "status": "pass",
    "time": 0.000999927520752,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_pause_resume_BIG_offset\/1.html\" ('tags\/for\/test_pause_resume_BIG_offset\/1.html', 'Test', '{%for i in array.items limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:3 offset:1000 %}{{i}}{%endfor%}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))), '123\nnext\n456\nnext\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_pause_resume_BIG_offset\/1.html\" ('tags\/for\/test_pause_resume_BIG_offset\/1.html', 'Test', '{%for i in array.items limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:3 offset:1000 %}{{i}}{%endfor%}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))), '123\nnext\n456\nnext\n'))",
    "status": "pass",
    "time": 0.000896215438843,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_pause_resume_limit\/1.html\" ('tags\/for\/test_pause_resume_limit\/1.html', 'Test', '{%for i in array.items limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:1 %}{{i}}{%endfor%}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))), '123\nnext\n456\nnext\n7'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_pause_resume_limit\/1.html\" ('tags\/for\/test_pause_resume_limit\/1.html', 'Test', '{%for i in array.items limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:3 %}{{i}}{%endfor%}\nnext\n{%for i in array.items offset:continue limit:1 %}{{i}}{%endfor%}', array(array(array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))), '123\nnext\n456\nnext\n7'))",
    "status": "pass",
    "time": 0.00093412399292,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_spacing_with_variable_naming_in_for_loop\/1.html\" ('tags\/for\/test_spacing_with_variable_naming_in_for_loop\/1.html', 'Test', '{% for       item   in   items %}{{item}}{% endfor %}', array(array(array(1, 2, 3, 4, 5)), '12345'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/for\/test_spacing_with_variable_naming_in_for_loop\/1.html\" ('tags\/for\/test_spacing_with_variable_naming_in_for_loop\/1.html', 'Test', '{% for       item   in   items %}{{item}}{% endfor %}', array(array(array(1, 2, 3, 4, 5)), '12345'))",
    "status": "pass",
    "time": 0.000462055206299,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_enumerable_drop\/1.html\" ('tags\/html\/test_enumerable_drop\/1.html', 'Test', '{% tablerow n in numbers cols:3%} {{n}} {% endtablerow %}', array(array(array(1, 2, 3, 4, 5, 6)), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_enumerable_drop\/1.html\" ('tags\/html\/test_enumerable_drop\/1.html', 'Test', '{% tablerow n in numbers cols:3%} {{n}} {% endtablerow %}', array(array(array(1, 2, 3, 4, 5, 6)), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))",
    "status": "pass",
    "time": 0.000931978225708,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_html_col_counter\/1.html\" ('tags\/html\/test_html_col_counter\/1.html', 'Test', '{% tablerow n in numbers cols:2%}{{tablerowloop.col}}{% endtablerow %}', array(array(array(1, 2, 3, 4, 5, 6)), '<tr class=\"row1\">\n<td class=\"col1\">1<\/td><td class=\"col2\">2<\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\">1<\/td><td class=\"col2\">2<\/td><\/tr>\n<tr class=\"row3\"><td class=\"col1\">1<\/td><td class=\"col2\">2<\/td><\/tr>\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_html_col_counter\/1.html\" ('tags\/html\/test_html_col_counter\/1.html', 'Test', '{% tablerow n in numbers cols:2%}{{tablerowloop.col}}{% endtablerow %}', array(array(array(1, 2, 3, 4, 5, 6)), '<tr class=\"row1\">\n<td class=\"col1\">1<\/td><td class=\"col2\">2<\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\">1<\/td><td class=\"col2\">2<\/td><\/tr>\n<tr class=\"row3\"><td class=\"col1\">1<\/td><td class=\"col2\">2<\/td><\/tr>\n'))",
    "status": "fail",
    "time": 0.000746965408325,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "<tr class=\"row1\">\n<td class=\"col1\">1<\/td><td class=\"col2\">2<\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\">1<\/td><td class=\"col2\">2<\/td><\/tr>\n<tr class=\"row3\"><td class=\"col1\">1<\/td><td class=\"col2\">2<\/td><\/tr>\n",
                "<tr class=\"row1\">\n<td class=\"col1\"><\/td><td class=\"col2\"><\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"><\/td><td class=\"col2\"><\/td><\/tr>\n<tr class=\"row3\"><td class=\"col1\"><\/td><td class=\"col2\"><\/td><\/tr>\n",
                "tags\/html\/test_html_col_counter\/1.html"
            ]
        }
    ],
    "message": "tags\/html\/test_html_col_counter\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_html_table\/1.html\" ('tags\/html\/test_html_table\/1.html', 'Test', '{% tablerow n in numbers cols:3%} {{n}} {% endtablerow %}', array(array(array(1, 2, 3, 4, 5, 6)), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_html_table\/1.html\" ('tags\/html\/test_html_table\/1.html', 'Test', '{% tablerow n in numbers cols:3%} {{n}} {% endtablerow %}', array(array(array(1, 2, 3, 4, 5, 6)), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))",
    "status": "pass",
    "time": 0.000559091567993,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_html_table\/2.html\" ('tags\/html\/test_html_table\/2.html', 'Test', '{% tablerow n in numbers cols:3%} {{n}} {% endtablerow %}', array(array(array()), '<tr class=\"row1\">\n<\/tr>\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_html_table\/2.html\" ('tags\/html\/test_html_table\/2.html', 'Test', '{% tablerow n in numbers cols:3%} {{n}} {% endtablerow %}', array(array(array()), '<tr class=\"row1\">\n<\/tr>\n'))",
    "status": "pass",
    "time": 0.000349998474121,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_html_table_with_different_cols\/1.html\" ('tags\/html\/test_html_table_with_different_cols\/1.html', 'Test', '{% tablerow n in numbers cols:5%} {{n}} {% endtablerow %}', array(array(array(1, 2, 3, 4, 5, 6)), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><td class=\"col4\"> 4 <\/td><td class=\"col5\"> 5 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 6 <\/td><\/tr>\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_html_table_with_different_cols\/1.html\" ('tags\/html\/test_html_table_with_different_cols\/1.html', 'Test', '{% tablerow n in numbers cols:5%} {{n}} {% endtablerow %}', array(array(array(1, 2, 3, 4, 5, 6)), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><td class=\"col4\"> 4 <\/td><td class=\"col5\"> 5 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 6 <\/td><\/tr>\n'))",
    "status": "pass",
    "time": 0.00052809715271,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_offset_and_limit\/1.html\" ('tags\/html\/test_offset_and_limit\/1.html', 'Test', '{% tablerow n in numbers cols:3 offset:1 limit:6%} {{n}} {% endtablerow %}', array(array(array(0, 1, 2, 3, 4, 5, 6, 7)), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_offset_and_limit\/1.html\" ('tags\/html\/test_offset_and_limit\/1.html', 'Test', '{% tablerow n in numbers cols:3 offset:1 limit:6%} {{n}} {% endtablerow %}', array(array(array(0, 1, 2, 3, 4, 5, 6, 7)), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))",
    "status": "pass",
    "time": 0.000555992126465,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_quoted_fragment\/1.html\" ('tags\/html\/test_quoted_fragment\/1.html', 'Test', '{% tablerow n in collections.frontpage cols:3%} {{n}} {% endtablerow %}', array(array(array(array(1, 2, 3, 4, 5, 6))), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_quoted_fragment\/1.html\" ('tags\/html\/test_quoted_fragment\/1.html', 'Test', '{% tablerow n in collections.frontpage cols:3%} {{n}} {% endtablerow %}', array(array(array(array(1, 2, 3, 4, 5, 6))), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))",
    "status": "pass",
    "time": 0.000602006912231,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_quoted_fragment2\/1.html\" ('tags\/html\/test_quoted_fragment2\/1.html', 'Test', '{% tablerow n in collections[\\'frontpage\\'] cols:3%} {{n}} {% endtablerow %}', array(array(array(array(1, 2, 3, 4, 5, 6))), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))"
}{
    "event": "test",
    "suite": "PHPLiquidTest::testAdd",
    "test": "PHPLiquidTest::testAdd with data set \"tags\/html\/test_quoted_fragment2\/1.html\" ('tags\/html\/test_quoted_fragment2\/1.html', 'Test', '{% tablerow n in collections[\\'frontpage\\'] cols:3%} {{n}} {% endtablerow %}', array(array(array(array(1, 2, 3, 4, 5, 6))), '<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n'))",
    "status": "fail",
    "time": 0.000753879547119,
    "trace": [
        {
            "file": "\/Users\/dad\/polygot-template-tests\/Loaders\/PHP\/Base.php",
            "line": 24,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::",
            "args": [
                "<tr class=\"row1\">\n<td class=\"col1\"> 1 <\/td><td class=\"col2\"> 2 <\/td><td class=\"col3\"> 3 <\/td><\/tr>\n<tr class=\"row2\"><td class=\"col1\"> 4 <\/td><td class=\"col2\"> 5 <\/td><td class=\"col3\"> 6 <\/td><\/tr>\n",
                "PHPUnit_Framework_Error_Notice: Array to string conversion",
                "tags\/html\/test_quoted_fragment2\/1.html"
            ]
        }
    ],
    "message": "tags\/html\/test_quoted_fragment2\/1.html\nFailed asserting that two strings are equal.",
    "output": ""
}